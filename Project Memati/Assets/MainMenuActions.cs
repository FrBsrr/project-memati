//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/MainMenuActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MainMenuActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MainMenuActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""MainMenuActions"",
    ""maps"": [
        {
            ""name"": ""CreatePlayer"",
            ""id"": ""a661a975-7119-432b-9592-6aff0c831170"",
            ""actions"": [
                {
                    ""name"": ""CreatePlayerKeyboard"",
                    ""type"": ""Button"",
                    ""id"": ""08d2da62-4313-475c-a95a-ad3d191e0704"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CreatePlayerGamepad"",
                    ""type"": ""Button"",
                    ""id"": ""d9f03d05-114c-48e6-918e-fbcff0538b85"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a80186fc-54a2-48f7-9a03-578a5aa719eb"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CreatePlayerKeyboard"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""00de4a8d-0f91-48f0-a311-f928223a8b63"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CreatePlayerGamepad"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6c11e50e-407f-4192-ac3b-6cc9deb456b1"",
                    ""path"": ""<HID:: USB Gamepad          >/button10"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CreatePlayerGamepad"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // CreatePlayer
        m_CreatePlayer = asset.FindActionMap("CreatePlayer", throwIfNotFound: true);
        m_CreatePlayer_CreatePlayerKeyboard = m_CreatePlayer.FindAction("CreatePlayerKeyboard", throwIfNotFound: true);
        m_CreatePlayer_CreatePlayerGamepad = m_CreatePlayer.FindAction("CreatePlayerGamepad", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // CreatePlayer
    private readonly InputActionMap m_CreatePlayer;
    private List<ICreatePlayerActions> m_CreatePlayerActionsCallbackInterfaces = new List<ICreatePlayerActions>();
    private readonly InputAction m_CreatePlayer_CreatePlayerKeyboard;
    private readonly InputAction m_CreatePlayer_CreatePlayerGamepad;
    public struct CreatePlayerActions
    {
        private @MainMenuActions m_Wrapper;
        public CreatePlayerActions(@MainMenuActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @CreatePlayerKeyboard => m_Wrapper.m_CreatePlayer_CreatePlayerKeyboard;
        public InputAction @CreatePlayerGamepad => m_Wrapper.m_CreatePlayer_CreatePlayerGamepad;
        public InputActionMap Get() { return m_Wrapper.m_CreatePlayer; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CreatePlayerActions set) { return set.Get(); }
        public void AddCallbacks(ICreatePlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_CreatePlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CreatePlayerActionsCallbackInterfaces.Add(instance);
            @CreatePlayerKeyboard.started += instance.OnCreatePlayerKeyboard;
            @CreatePlayerKeyboard.performed += instance.OnCreatePlayerKeyboard;
            @CreatePlayerKeyboard.canceled += instance.OnCreatePlayerKeyboard;
            @CreatePlayerGamepad.started += instance.OnCreatePlayerGamepad;
            @CreatePlayerGamepad.performed += instance.OnCreatePlayerGamepad;
            @CreatePlayerGamepad.canceled += instance.OnCreatePlayerGamepad;
        }

        private void UnregisterCallbacks(ICreatePlayerActions instance)
        {
            @CreatePlayerKeyboard.started -= instance.OnCreatePlayerKeyboard;
            @CreatePlayerKeyboard.performed -= instance.OnCreatePlayerKeyboard;
            @CreatePlayerKeyboard.canceled -= instance.OnCreatePlayerKeyboard;
            @CreatePlayerGamepad.started -= instance.OnCreatePlayerGamepad;
            @CreatePlayerGamepad.performed -= instance.OnCreatePlayerGamepad;
            @CreatePlayerGamepad.canceled -= instance.OnCreatePlayerGamepad;
        }

        public void RemoveCallbacks(ICreatePlayerActions instance)
        {
            if (m_Wrapper.m_CreatePlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICreatePlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_CreatePlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CreatePlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CreatePlayerActions @CreatePlayer => new CreatePlayerActions(this);
    public interface ICreatePlayerActions
    {
        void OnCreatePlayerKeyboard(InputAction.CallbackContext context);
        void OnCreatePlayerGamepad(InputAction.CallbackContext context);
    }
}
